// Generated by CoffeeScript 1.3.3
var DEBUG, appTitle, cleanPageTitle, countMsg, defaultPostHeader, maxMsgLength, postHeaderSpliter, reservedMsgLength, twitterLoginUrl, updateErrorHandler, updateNotification, updateSuccessHandler;

appTitle = 'Tweet: Now Browsing!';

DEBUG = true;

defaultPostHeader = 'NowBrowsing';

postHeaderSpliter = ': ';

maxMsgLength = 140;

reservedMsgLength = 21;

twitterLoginUrl = 'https://twitter.com/login';

cleanPageTitle = function(title, postHeaderLength) {
  var maxTitleLength, threeDots;
  threeDots = '...';
  maxTitleLength = maxMsgLength - (reservedMsgLength + threeDots.length + postHeaderSpliter.length + postHeaderLength);
  if (title.length > maxTitleLength) {
    title = title.slice(0, maxTitleLength) + threeDots;
  }
  return title;
};

countMsg = function() {
  var count, len, txt;
  txt = $('#text').val();
  len = txt.length;
  count = maxMsgLength - (len + reservedMsgLength);
  return $('#char-count').text(count);
};

updateNotification = webkitNotifications.createNotification('tw48.png', appTitle, 'Posting...');

updateSuccessHandler = function(data, textStatus, jqXHR) {
  var msg, postId, screenName;
  LOGD('==== 投稿に成功しました ====');
  LOGD(jqXHR);
  LOGD(data);
  postId = data['id_str'];
  msg = data['text'];
  screenName = data['user']['screen_name'];
  LOGD('============================');
};

updateErrorHandler = function(jqXHR, textStatus, errorThrown) {
  LOGD('投稿に失敗しました');
  LOGD(jqXHR);
  LOGD(errorThrown);
  LOGD('==================');
};

window.onload = function() {
  $('#text').val('processing...');
  $('#text').bind('keyup change paste', function() {
    var count, len, txt;
    txt = $(this).val();
    len = txt.length;
    count = maxMsgLength - (len + reservedMsgLength);
    $('#char-count').text(count);
  });
  return chrome.tabs.getSelected(null, function(tab) {
    var reqHeaders, url;
    url = 'http://twitter.com/intent/tweet?url=' + encodeURIComponent(tab.url);
    reqHeaders = {
      'Accept-Language': 'en-us'
    };
    return $.ajax(url, {
      dataType: 'html',
      headers: reqHeaders,
      error: function(jqXHR, textStatus, errorThrown) {
        LOGD(jqXHR);
        LOGD(textStatus);
        LOGD(errorThrown);
      },
      success: function(data, textStatus, jqXHR) {
        var postHeader, tw, updateStatus;
        tw = new TwitterWeb(data);
        if (tw.login === true) {
          LOGD('ログイン状態');
          postHeader = localStorage['customPostHeader'];
          if (!postHeader) {
            postHeader = defaultPostHeader;
          }
          updateStatus = postHeader + postHeaderSpliter + cleanPageTitle(tab.title, postHeader.length);
          $('#text').val(updateStatus);
          $('#url').val(tab.url);
          countMsg();
          $('#post_button').click(function() {
            return tw.update(updateStatus + ' ' + tab.url, updateSuccessHandler, updateErrorHandler);
          });
        } else if (tw.login === false) {
          LOGD('未ログイン状態');
          $('#post_button').val('Open twitter.com').bind('click', function() {
            return chrome.tabs.create({
              'url': twitterLoginUrl
            });
          });
        } else {
          LOGD('何らかのエラー');
        }
      }
    });
  });
};

/*
やりたいこと
  ポストが成功したかしていないかの有無をDesktop Notificationで行う https://developer.chrome.com/extensions/notifications.html
  140字以内であるかのチェックは投稿ボタンが押された時に行う
  右クリックメニューの追加 http://developer.chrome.com/extensions/contextMenus.html
  backgroud pages APIを使用して予めTwitterWebのhtmlを取得する？ http://developer.chrome.com/extensions/background_pages.html
    定期的にtwitterにアクセスしてログイン状況等を収集

  backgroudでポスト処理をして、notificationで成功したかどうか通知する？
    popup.htmlとMessage Passingを使用する http://developer.chrome.com/extensions/messaging.html
*/

