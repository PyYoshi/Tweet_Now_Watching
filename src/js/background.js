// Generated by CoffeeScript 1.3.3
var DelayAccessSecond, ShowNotificationSecond, TwitterHtml, addContextMenus, checkHtml, createContextMenus, createNotifer, fetchTwitterWeb, isLogin, popupWindow, renderBadge, tw, updateStatus;

TwitterHtml = null;

tw = new TwitterWeb();

DelayAccessSecond = getLocalStorage(DelayAccessSecondKey, DefaultDelayAccessSecond);

ShowNotificationSecond = getLocalStorage(ShowNotificationSecondKey, DefaultShowNotificationSecond);

/*
ポップアイコンに表示するバッジをレンダリングする関数

@param badge {String} ポップアイコンに表示するテキスト
@param color {Array<R,G,B,A>} テキストの背景色
@param title {String} ポップアイコンにマウスオーバした時に表示するtips
*/


renderBadge = function(badge, color, title) {
  if (badge == null) {
    badge = '';
  }
  if (color == null) {
    color = [65, 131, 196, 255];
  }
  if (title == null) {
    title = AppName;
  }
  chrome.browserAction.setBadgeText({
    text: badge
  });
  chrome.browserAction.setBadgeBackgroundColor({
    color: color
  });
  chrome.browserAction.setTitle({
    title: title
  });
};

/*
Twitter Webのhtmlを取得する関数

@return {Deffered}
*/


fetchTwitterWeb = function() {
  var ajaxOpts, res;
  ajaxOpts = {
    callback: 'callback',
    dataType: 'text'
  };
  res = $.ajax(AccessUrl, ajaxOpts);
  return res;
};

/*
定期的にTwitter Webをチェックする関数
  一定間隔でfetchTwitterWeb()が実行される。
  非ログイン時はポップアイコンにバッジを表示して非ログインであることを知らせる
*/


checkHtml = function(repeat) {
  if (repeat == null) {
    repeat = true;
  }
  $.when(fetchTwitterWeb()).then(function(ajaxSuccessResArgs) {
    var badge, color, title;
    TwitterHtml = ajaxSuccessResArgs;
    tw.twitterHtmlDiv.innerHTML = TwitterHtml;
    tw.login = tw.isLogin();
    if (tw.login) {
      tw.authToken = tw.getAuthToken();
      color = [65, 131, 196, 255];
      badge = '';
      title = AppName;
    } else {
      color = [166, 41, 41, 255];
      badge = '☹';
      title = 'You have to be connected to the internet and logged in to Twitter';
    }
    renderBadge(badge, color, title);
    LOGD(tw);
  }, function(ajaxErrorResArgs) {}).done(function() {
    return setTimeout(function() {
      if (repeat) {
        checkHtml();
      }
    }, DelayAccessSecond);
  });
};

/*
Desktop Notificationを作成する関数

@param title {String} Notificationに表示するタイトル(拡張名はセットしないこと)
@param body {String} Notificationに表示する本文(Not html)
@return {Notification} Notificationオブジェクト
*/


createNotifer = function(title, body) {
  var ntf;
  if (title == null) {
    title = null;
  }
  if (body == null) {
    body = null;
  }
  ntf = webkitNotifications.createNotification('media/48.png', title, body);
  return ntf;
};

/*
Twitter Web APIで投稿する関数

@param msg {String} 投稿するメッセージ
*/


updateStatus = function(msg) {
  var ntfDone, ntfPosting;
  if (msg == null) {
    msg = null;
  }
  ntfPosting = createNotifer('posting...', msg);
  ntfDone = createNotifer('posting... Done', msg);
  return tw.update(msg, function(jqXHR, settings) {
    return ntfPosting.show();
  }, function(data, textStatus, jqXHR) {
    ntfPosting.close();
    ntfDone.show();
    setTimeout(function() {
      ntfDone.close();
    }, ShowNotificationSecond);
  }, function(jqXHR, textStatus, errorThrown) {
    var ntfError;
    ntfPosting.close();
    ntfError = createNotifer('posting... Error', msg);
    ntfError.show();
  });
};

/*
Popupから送信されたメッセージオブジェクトをキャッチするイベントハンドラー
*/


chrome.extension.onMessage.addListener(function(request, sender, sendResponse) {
  var repead, sendObject;
  LOGD('命令をを受け取りました。');
  LOGD(request);
  LOGD(sender);
  if (request.sendCode === 'updateStatus') {
    LOGD('投稿処理を行います。');
    updateStatus(request.msg);
    sendObject = {
      status: 'success'
    };
  } else if (request.sendCode === 'checkLogin') {
    LOGD('ログインチェックを行います。');
    checkHtml(repead = false);
    sendObject = {
      status: 'success'
    };
  } else {
    LOGD('不正なデータです。処理は無視されます。');
    sendObject = {
      status: 'error'
    };
  }
  LOGD(sendObject);
  sendResponse(sendObject);
});

/*
BackgroundからPopupへログインチェックの結果を渡すための関数
  Popupから呼ばれます。

@return {Boolean} true:ログイン済み false:非ログイン
*/


isLogin = function() {
  return tw.login;
};

/*
指定されたURLをポップアップさせる関数
*/


popupWindow = function(url, windowName, windowHeight, windowWitdh) {
  var windowOption;
  if (url == null) {
    url = MANIFEST.browser_action.default_popup;
  }
  if (windowName == null) {
    windowName = 'I Love Python.';
  }
  if (windowHeight == null) {
    windowHeight = 230;
  }
  if (windowWitdh == null) {
    windowWitdh = 320;
  }
  windowOption = "height=" + windowHeight + ",width=" + windowWitdh + ",menubar=no,toolbar=no,location=no,status=no,resizable=yes,scrollbars=no";
  return window.open(url, windowName, windowOption);
};

/*
コンテキストメニューを作成する関数

@param title {String} コンテキストメニューのタイトル
@param contexs {Array<String>} 監視するイベントタイプ
@option parentId {Number} コンテキストメニューの親ID
@option onclick {Function(onClickData, tab)} クリック時のcallback関数
@option callback {Function()} コンテキストメニュー作成後に実行する関数
@return {Number} コンテキストメニューID
*/


createContextMenus = function(title, contexts, parentId, onclick, callback) {
  var id, options;
  if (title == null) {
    title = AppName;
  }
  if (contexts == null) {
    contexts = ['all'];
  }
  if (parentId == null) {
    parentId = null;
  }
  if (onclick == null) {
    onclick = null;
  }
  if (callback == null) {
    callback = null;
  }
  if (onclick === null) {
    onclick = function(onClickData, tab) {};
  }
  if (callback === null) {
    callback = function() {};
  }
  options = {
    title: title,
    contexts: contexts,
    onclick: onclick
  };
  if (parentId !== null) {
    options.parentId = parentId;
  }
  id = chrome.contextMenus.create(options, callback);
  return id;
};

/*
コンテキストメニューを追加する関数
  選択文字から呼ばれた場合、それをメッセージにする。
  Share        : ポップアップを表示
  Share - Quick: ポップアップせずにそのまま投稿する
  Share - Quote: 引用をステータスにポップアップを表示
*/


addContextMenus = function() {
  var childQuickShareContexts, childQuickShareContextsOnClick, childQuickShareId, childQuoteShareContexts, childQuoteShareOnClick, childShareContexts, childShareId, childShareOnClick, parentContexts, parentId;
  parentContexts = ['all'];
  parentId = createContextMenus(AppName, parentContexts, null, null, null);
  LOGD('parentId: ' + parentId);
  childShareContexts = ['page'];
  childShareOnClick = function(onClickData, tab) {
    LOGD(onClickData);
    LOGD(tab);
    chrome.tabs.getSelected(tab.windowId, function(tab) {
      return LOGD(tab);
    });
  };
  childShareId = createContextMenus('Share', childShareContexts, parentId, childShareOnClick, null);
  LOGD('childShareId: ' + childShareId);
  childQuickShareContexts = ['page'];
  childQuickShareContextsOnClick = function(onClickData, tab) {
    LOGD(onClickData);
    LOGD(tab);
  };
  childQuickShareId = createContextMenus('Share - Quick', childQuickShareContexts, parentId, childQuickShareContextsOnClick, null);
  LOGD('childQuickShareId: ' + childQuickShareId);
  childQuoteShareContexts = ['selection'];
  childQuoteShareOnClick = function(onClickData, tab) {
    LOGD(onClickData);
    LOGD(tab);
  };
};

$(function() {
  checkHtml();
  return addContextMenus();
});
